openapi: 3.0.3
info:
  title: 'Laravel API Documentation'
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost/bookstore/public'
tags:
  -
    name: Authors
    description: "\nAPIs for managing authors"
  -
    name: Books
    description: "\nAPIs for managing books"
  -
    name: Ratings
    description: "\nAPIs for managing book ratings"
paths:
  /api/authors:
    get:
      summary: 'Get all authors'
      operationId: getAllAuthors
      description: 'Retrieve a list of all authors.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number for pagination.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number for pagination.'
            example: 1
            nullable: false
        -
          in: query
          name: per_page
          description: 'Number of items per page (10-100).'
          example: 10
          required: false
          schema:
            type: integer
            description: 'Number of items per page (10-100).'
            example: 10
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      id: 1
                      name: 'John Doe'
                      total_high_ratings: 1250
                      books_count: 15
                  links: {  }
                  meta: {  }
                properties:
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        name: 'John Doe'
                        total_high_ratings: 1250
                        books_count: 15
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: 'John Doe'
                        total_high_ratings:
                          type: integer
                          example: 1250
                        books_count:
                          type: integer
                          example: 15
                  links:
                    type: object
                    properties: {  }
                  meta:
                    type: object
                    properties: {  }
      tags:
        - Authors
      security: []
  /api/authors/top:
    get:
      summary: 'Get top 10 most famous authors'
      operationId: getTop10MostFamousAuthors
      description: 'Retrieve the top 10 authors ranked by high ratings (rating > 5).'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      id: 1
                      name: 'John Doe'
                      total_high_ratings: 1250
                      books_count: 15
                properties:
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        name: 'John Doe'
                        total_high_ratings: 1250
                        books_count: 15
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: 'John Doe'
                        total_high_ratings:
                          type: integer
                          example: 1250
                        books_count:
                          type: integer
                          example: 15
      tags:
        - Authors
      security: []
  '/api/authors/{id}':
    get:
      summary: 'Get a specific author'
      operationId: getASpecificAuthor
      description: 'Retrieve details of a specific author by ID.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 1
                    name: 'John Doe'
                    total_high_ratings: 1250
                    books_count: 15
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: 'John Doe'
                      total_high_ratings:
                        type: integer
                        example: 1250
                      books_count:
                        type: integer
                        example: 15
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Author not found'
                properties:
                  message:
                    type: string
                    example: 'Author not found'
      tags:
        - Authors
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the author.'
        example: 1
        required: true
        schema:
          type: integer
  /api/books:
    get:
      summary: 'Get all books'
      operationId: getAllBooks
      description: 'Retrieve a paginated list of all books with their authors, categories, and ratings.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number for pagination.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number for pagination.'
            example: 1
            nullable: false
        -
          in: query
          name: per_page
          description: 'Number of items per page (10-100).'
          example: 10
          required: false
          schema:
            type: integer
            description: 'Number of items per page (10-100).'
            example: 10
            nullable: false
        -
          in: query
          name: q
          description: 'Filter by book title or author name.'
          example: 'Harry Potter'
          required: false
          schema:
            type: string
            description: 'Filter by book title or author name.'
            example: 'Harry Potter'
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      id: 1
                      title: 'Sample Book Title'
                      author:
                        id: 1
                        name: 'John Doe'
                      category:
                        id: 1
                        name: Fiction
                      average_rating: 7.85
                      voter_count: 150
                  links: {  }
                  meta: {  }
                properties:
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        title: 'Sample Book Title'
                        author:
                          id: 1
                          name: 'John Doe'
                        category:
                          id: 1
                          name: Fiction
                        average_rating: 7.85
                        voter_count: 150
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        title:
                          type: string
                          example: 'Sample Book Title'
                        author:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            name:
                              type: string
                              example: 'John Doe'
                        category:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            name:
                              type: string
                              example: Fiction
                        average_rating:
                          type: number
                          example: 7.85
                        voter_count:
                          type: integer
                          example: 150
                  links:
                    type: object
                    properties: {  }
                  meta:
                    type: object
                    properties: {  }
      tags:
        - Books
      security: []
  '/api/books/{id}':
    get:
      summary: 'Get a specific book'
      operationId: getASpecificBook
      description: 'Retrieve details of a specific book by ID.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 1
                    title: 'Sample Book Title'
                    author:
                      id: 1
                      name: 'John Doe'
                    category:
                      id: 1
                      name: Fiction
                    average_rating: 7.85
                    voter_count: 150
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      title:
                        type: string
                        example: 'Sample Book Title'
                      author:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          name:
                            type: string
                            example: 'John Doe'
                      category:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          name:
                            type: string
                            example: Fiction
                      average_rating:
                        type: number
                        example: 7.85
                      voter_count:
                        type: integer
                        example: 150
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Book not found'
                properties:
                  message:
                    type: string
                    example: 'Book not found'
      tags:
        - Books
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the book.'
        example: 1
        required: true
        schema:
          type: integer
  /api/ratings:
    get:
      summary: 'Get all ratings'
      operationId: getAllRatings
      description: 'Retrieve a paginated list of all ratings.'
      parameters:
        -
          in: query
          name: page
          description: 'Page number for pagination.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page number for pagination.'
            example: 1
            nullable: false
        -
          in: query
          name: per_page
          description: 'Number of items per page (10-100).'
          example: 10
          required: false
          schema:
            type: integer
            description: 'Number of items per page (10-100).'
            example: 10
            nullable: false
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      id: 1
                      rating: 8
                      book:
                        id: 1
                        title: 'Sample Book'
                      created_at: '2024-01-15 10:30:00'
                  links: {  }
                  meta: {  }
                properties:
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        rating: 8
                        book:
                          id: 1
                          title: 'Sample Book'
                        created_at: '2024-01-15 10:30:00'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        rating:
                          type: integer
                          example: 8
                        book:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            title:
                              type: string
                              example: 'Sample Book'
                        created_at:
                          type: string
                          example: '2024-01-15 10:30:00'
                  links:
                    type: object
                    properties: {  }
                  meta:
                    type: object
                    properties: {  }
      tags:
        - Ratings
      security: []
    post:
      summary: 'Create a new rating'
      operationId: createANewRating
      description: 'Submit a new rating for a book.'
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 1
                    rating: 8
                    book:
                      id: 1
                      title: 'Sample Book'
                    created_at: '2024-01-15 10:30:00'
                  message: 'Rating submitted successfully'
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      rating:
                        type: integer
                        example: 8
                      book:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          title:
                            type: string
                            example: 'Sample Book'
                      created_at:
                        type: string
                        example: '2024-01-15 10:30:00'
                  message:
                    type: string
                    example: 'Rating submitted successfully'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Validation error'
                  errors:
                    book_id:
                      - 'The book id field is required.'
                    rating:
                      - 'The rating must be between 1 and 10.'
                properties:
                  message:
                    type: string
                    example: 'Validation error'
                  errors:
                    type: object
                    properties:
                      book_id:
                        type: array
                        example:
                          - 'The book id field is required.'
                        items:
                          type: string
                      rating:
                        type: array
                        example:
                          - 'The rating must be between 1 and 10.'
                        items:
                          type: string
      tags:
        - Ratings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                book_id:
                  type: integer
                  description: 'The ID of the book to rate.'
                  example: 1
                  nullable: false
                rating:
                  type: integer
                  description: 'The rating value (1-10).'
                  example: 8
                  nullable: false
              required:
                - book_id
                - rating
      security: []
  '/api/authors/{author_id}/books':
    get:
      summary: 'Get books by author'
      operationId: getBooksByAuthor
      description: 'Retrieve all books written by a specific author.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    -
                      id: 1
                      title: 'Sample Book Title'
                properties:
                  data:
                    type: array
                    example:
                      -
                        id: 1
                        title: 'Sample Book Title'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        title:
                          type: string
                          example: 'Sample Book Title'
      tags:
        - Ratings
      security: []
    parameters:
      -
        in: path
        name: author_id
        description: 'The ID of the author.'
        example: 1
        required: true
        schema:
          type: integer
